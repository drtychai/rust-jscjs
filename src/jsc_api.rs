/* automatically generated by rust-bindgen */

pub enum Struct_OpaqueJSContextGroup { }
pub type JSContextGroupRef = *const Struct_OpaqueJSContextGroup;
pub enum Struct_OpaqueJSContext { }
pub type JSContextRef = *const Struct_OpaqueJSContext;
pub type JSGlobalContextRef = *mut Struct_OpaqueJSContext;
pub enum Struct_OpaqueJSString { }
pub type JSStringRef = *mut Struct_OpaqueJSString;
pub enum Struct_OpaqueJSClass { }
pub type JSClassRef = *mut Struct_OpaqueJSClass;
pub enum Struct_OpaqueJSPropertyNameArray { }
pub type JSPropertyNameArrayRef = *mut Struct_OpaqueJSPropertyNameArray;
pub enum Struct_OpaqueJSPropertyNameAccumulator { }
pub type JSPropertyNameAccumulatorRef =
    *mut Struct_OpaqueJSPropertyNameAccumulator;
pub type JSTypedArrayBytesDeallocator =
    ::std::option::Option<unsafe extern "C" fn(bytes:
                                                   *mut ::std::os::raw::c_void,
                                               deallocatorContext:
                                                   *mut ::std::os::raw::c_void)>;
pub enum Struct_OpaqueJSValue { }
pub type JSValueRef = *const Struct_OpaqueJSValue;
pub type JSObjectRef = *mut Struct_OpaqueJSValue;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    kJSTypeUndefined = 0,
    kJSTypeNull = 1,
    kJSTypeBoolean = 2,
    kJSTypeNumber = 3,
    kJSTypeString = 4,
    kJSTypeObject = 5,
}
pub type JSType = Enum_Unnamed1;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed2 {
    kJSTypedArrayTypeInt8Array = 0,
    kJSTypedArrayTypeInt16Array = 1,
    kJSTypedArrayTypeInt32Array = 2,
    kJSTypedArrayTypeUint8Array = 3,
    kJSTypedArrayTypeUint8ClampedArray = 4,
    kJSTypedArrayTypeUint16Array = 5,
    kJSTypedArrayTypeUint32Array = 6,
    kJSTypedArrayTypeFloat32Array = 7,
    kJSTypedArrayTypeFloat64Array = 8,
    kJSTypedArrayTypeArrayBuffer = 9,
    kJSTypedArrayTypeNone = 10,
}
pub type JSTypedArrayType = Enum_Unnamed2;
pub type ptrdiff_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed3 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed3;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed4 {
    kJSPropertyAttributeNone = 0,
    kJSPropertyAttributeReadOnly = 2,
    kJSPropertyAttributeDontEnum = 4,
    kJSPropertyAttributeDontDelete = 8,
}
pub type JSPropertyAttributes = ::std::os::raw::c_uint;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed5 {
    kJSClassAttributeNone = 0,
    kJSClassAttributeNoAutomaticPrototype = 2,
}
pub type JSClassAttributes = ::std::os::raw::c_uint;
pub type JSObjectInitializeCallback =
    ::std::option::Option<extern "C" fn(ctx: JSContextRef,
                                        object: JSObjectRef)>;
pub type JSObjectFinalizeCallback =
    ::std::option::Option<extern "C" fn(object: JSObjectRef)>;
pub type JSObjectHasPropertyCallback =
    ::std::option::Option<extern "C" fn(ctx: JSContextRef,
                                        object: JSObjectRef,
                                        propertyName: JSStringRef) -> u8>;
pub type JSObjectGetPropertyCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                               object: JSObjectRef,
                                               propertyName: JSStringRef,
                                               exception: *mut JSValueRef)
                              -> JSValueRef>;
pub type JSObjectSetPropertyCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                               object: JSObjectRef,
                                               propertyName: JSStringRef,
                                               value: JSValueRef,
                                               exception: *mut JSValueRef)
                              -> u8>;
pub type JSObjectDeletePropertyCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                               object: JSObjectRef,
                                               propertyName: JSStringRef,
                                               exception: *mut JSValueRef)
                              -> u8>;
pub type JSObjectGetPropertyNamesCallback =
    ::std::option::Option<extern "C" fn(ctx: JSContextRef,
                                        object: JSObjectRef,
                                        propertyNames:
                                            JSPropertyNameAccumulatorRef)>;
pub type JSObjectCallAsFunctionCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                               function: JSObjectRef,
                                               thisObject: JSObjectRef,
                                               argumentCount: size_t,
                                               arguments: *mut JSValueRef,
                                               exception: *mut JSValueRef)
                              -> JSValueRef>;
pub type JSObjectCallAsConstructorCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                               constructor: JSObjectRef,
                                               argumentCount: size_t,
                                               arguments: *mut JSValueRef,
                                               exception: *mut JSValueRef)
                              -> JSObjectRef>;
pub type JSObjectHasInstanceCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                               constructor: JSObjectRef,
                                               possibleInstance: JSValueRef,
                                               exception: *mut JSValueRef)
                              -> u8>;
pub type JSObjectConvertToTypeCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                               object: JSObjectRef,
                                               _type: JSType,
                                               exception: *mut JSValueRef)
                              -> JSValueRef>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed6 {
    pub name: *const ::std::os::raw::c_char,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub attributes: JSPropertyAttributes,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JSStaticValue = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed7 {
    pub name: *const ::std::os::raw::c_char,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub attributes: JSPropertyAttributes,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JSStaticFunction = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed8 {
    pub version: ::std::os::raw::c_int,
    pub attributes: JSClassAttributes,
    pub className: *const ::std::os::raw::c_char,
    pub parentClass: JSClassRef,
    pub staticValues: *const JSStaticValue,
    pub staticFunctions: *const JSStaticFunction,
    pub initialize: JSObjectInitializeCallback,
    pub finalize: JSObjectFinalizeCallback,
    pub hasProperty: JSObjectHasPropertyCallback,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub deleteProperty: JSObjectDeletePropertyCallback,
    pub getPropertyNames: JSObjectGetPropertyNamesCallback,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub callAsConstructor: JSObjectCallAsConstructorCallback,
    pub hasInstance: JSObjectHasInstanceCallback,
    pub convertToType: JSObjectConvertToTypeCallback,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JSClassDefinition = Struct_Unnamed8;
pub type JSChar = ::std::os::raw::c_ushort;
extern "C" {
    pub static kJSClassDefinitionEmpty: JSClassDefinition;
}
extern "C" {
    pub fn JSEvaluateScript(ctx: JSContextRef, script: JSStringRef,
                            thisObject: JSObjectRef, sourceURL: JSStringRef,
                            startingLineNumber: ::std::os::raw::c_int,
                            exception: *mut JSValueRef) -> JSValueRef;
    pub fn JSCheckScriptSyntax(ctx: JSContextRef, script: JSStringRef,
                               sourceURL: JSStringRef,
                               startingLineNumber: ::std::os::raw::c_int,
                               exception: *mut JSValueRef) -> u8;
    pub fn JSGarbageCollect(ctx: JSContextRef);
    pub fn JSValueGetType(ctx: JSContextRef, arg1: JSValueRef) -> JSType;
    pub fn JSValueIsUndefined(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueIsNull(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueIsBoolean(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueIsNumber(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueIsString(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueIsObject(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueIsObjectOfClass(ctx: JSContextRef, value: JSValueRef,
                                  jsClass: JSClassRef) -> u8;
    pub fn JSValueIsArray(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueIsDate(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueGetTypedArrayType(ctx: JSContextRef, value: JSValueRef,
                                    exception: *mut JSValueRef)
     -> JSTypedArrayType;
    pub fn JSValueIsEqual(ctx: JSContextRef, a: JSValueRef, b: JSValueRef,
                          exception: *mut JSValueRef) -> u8;
    pub fn JSValueIsStrictEqual(ctx: JSContextRef, a: JSValueRef,
                                b: JSValueRef) -> u8;
    pub fn JSValueIsInstanceOfConstructor(ctx: JSContextRef,
                                          value: JSValueRef,
                                          constructor: JSObjectRef,
                                          exception: *mut JSValueRef) -> u8;
    pub fn JSValueMakeUndefined(ctx: JSContextRef) -> JSValueRef;
    pub fn JSValueMakeNull(ctx: JSContextRef) -> JSValueRef;
    pub fn JSValueMakeBoolean(ctx: JSContextRef, boolean: u8) -> JSValueRef;
    pub fn JSValueMakeNumber(ctx: JSContextRef,
                             number: ::std::os::raw::c_double) -> JSValueRef;
    pub fn JSValueMakeString(ctx: JSContextRef, string: JSStringRef)
     -> JSValueRef;
    pub fn JSValueMakeFromJSONString(ctx: JSContextRef, string: JSStringRef)
     -> JSValueRef;
    pub fn JSValueCreateJSONString(ctx: JSContextRef, value: JSValueRef,
                                   indent: ::std::os::raw::c_uint,
                                   exception: *mut JSValueRef) -> JSStringRef;
    pub fn JSValueToBoolean(ctx: JSContextRef, value: JSValueRef) -> u8;
    pub fn JSValueToNumber(ctx: JSContextRef, value: JSValueRef,
                           exception: *mut JSValueRef)
     -> ::std::os::raw::c_double;
    pub fn JSValueToStringCopy(ctx: JSContextRef, value: JSValueRef,
                               exception: *mut JSValueRef) -> JSStringRef;
    pub fn JSValueToObject(ctx: JSContextRef, value: JSValueRef,
                           exception: *mut JSValueRef) -> JSObjectRef;
    pub fn JSValueProtect(ctx: JSContextRef, value: JSValueRef);
    pub fn JSValueUnprotect(ctx: JSContextRef, value: JSValueRef);
    pub fn JSClassCreate(definition: *const JSClassDefinition) -> JSClassRef;
    pub fn JSClassRetain(jsClass: JSClassRef) -> JSClassRef;
    pub fn JSClassRelease(jsClass: JSClassRef);
    pub fn JSObjectMake(ctx: JSContextRef, jsClass: JSClassRef,
                        data: *mut ::std::os::raw::c_void) -> JSObjectRef;
    pub fn JSObjectMakeFunctionWithCallback(ctx: JSContextRef,
                                            name: JSStringRef,
                                            callAsFunction:
                                                JSObjectCallAsFunctionCallback)
     -> JSObjectRef;
    pub fn JSObjectMakeConstructor(ctx: JSContextRef, jsClass: JSClassRef,
                                   callAsConstructor:
                                       JSObjectCallAsConstructorCallback)
     -> JSObjectRef;
    pub fn JSObjectMakeArray(ctx: JSContextRef, argumentCount: size_t,
                             arguments: *mut JSValueRef,
                             exception: *mut JSValueRef) -> JSObjectRef;
    pub fn JSObjectMakeDate(ctx: JSContextRef, argumentCount: size_t,
                            arguments: *mut JSValueRef,
                            exception: *mut JSValueRef) -> JSObjectRef;
    pub fn JSObjectMakeError(ctx: JSContextRef, argumentCount: size_t,
                             arguments: *mut JSValueRef,
                             exception: *mut JSValueRef) -> JSObjectRef;
    pub fn JSObjectMakeRegExp(ctx: JSContextRef, argumentCount: size_t,
                              arguments: *mut JSValueRef,
                              exception: *mut JSValueRef) -> JSObjectRef;
    pub fn JSObjectMakeFunction(ctx: JSContextRef, name: JSStringRef,
                                parameterCount: ::std::os::raw::c_uint,
                                parameterNames: *mut JSStringRef,
                                body: JSStringRef, sourceURL: JSStringRef,
                                startingLineNumber: ::std::os::raw::c_int,
                                exception: *mut JSValueRef) -> JSObjectRef;
    pub fn JSObjectGetPrototype(ctx: JSContextRef, object: JSObjectRef)
     -> JSValueRef;
    pub fn JSObjectSetPrototype(ctx: JSContextRef, object: JSObjectRef,
                                value: JSValueRef);
    pub fn JSObjectHasProperty(ctx: JSContextRef, object: JSObjectRef,
                               propertyName: JSStringRef) -> u8;
    pub fn JSObjectGetProperty(ctx: JSContextRef, object: JSObjectRef,
                               propertyName: JSStringRef,
                               exception: *mut JSValueRef) -> JSValueRef;
    pub fn JSObjectSetProperty(ctx: JSContextRef, object: JSObjectRef,
                               propertyName: JSStringRef, value: JSValueRef,
                               attributes: JSPropertyAttributes,
                               exception: *mut JSValueRef);
    pub fn JSObjectDeleteProperty(ctx: JSContextRef, object: JSObjectRef,
                                  propertyName: JSStringRef,
                                  exception: *mut JSValueRef) -> u8;
    pub fn JSObjectGetPropertyAtIndex(ctx: JSContextRef, object: JSObjectRef,
                                      propertyIndex: ::std::os::raw::c_uint,
                                      exception: *mut JSValueRef)
     -> JSValueRef;
    pub fn JSObjectSetPropertyAtIndex(ctx: JSContextRef, object: JSObjectRef,
                                      propertyIndex: ::std::os::raw::c_uint,
                                      value: JSValueRef,
                                      exception: *mut JSValueRef);
    pub fn JSObjectGetPrivate(object: JSObjectRef)
     -> *mut ::std::os::raw::c_void;
    pub fn JSObjectSetPrivate(object: JSObjectRef,
                              data: *mut ::std::os::raw::c_void) -> u8;
    pub fn JSObjectIsFunction(ctx: JSContextRef, object: JSObjectRef) -> u8;
    pub fn JSObjectCallAsFunction(ctx: JSContextRef, object: JSObjectRef,
                                  thisObject: JSObjectRef,
                                  argumentCount: size_t,
                                  arguments: *mut JSValueRef,
                                  exception: *mut JSValueRef) -> JSValueRef;
    pub fn JSObjectIsConstructor(ctx: JSContextRef, object: JSObjectRef)
     -> u8;
    pub fn JSObjectCallAsConstructor(ctx: JSContextRef, object: JSObjectRef,
                                     argumentCount: size_t,
                                     arguments: *mut JSValueRef,
                                     exception: *mut JSValueRef)
     -> JSObjectRef;
    pub fn JSObjectCopyPropertyNames(ctx: JSContextRef, object: JSObjectRef)
     -> JSPropertyNameArrayRef;
    pub fn JSPropertyNameArrayRetain(array: JSPropertyNameArrayRef)
     -> JSPropertyNameArrayRef;
    pub fn JSPropertyNameArrayRelease(array: JSPropertyNameArrayRef);
    pub fn JSPropertyNameArrayGetCount(array: JSPropertyNameArrayRef)
     -> size_t;
    pub fn JSPropertyNameArrayGetNameAtIndex(array: JSPropertyNameArrayRef,
                                             index: size_t) -> JSStringRef;
    pub fn JSPropertyNameAccumulatorAddName(accumulator:
                                                JSPropertyNameAccumulatorRef,
                                            propertyName: JSStringRef);
    pub fn JSContextGroupCreate() -> JSContextGroupRef;
    pub fn JSContextGroupRetain(group: JSContextGroupRef)
     -> JSContextGroupRef;
    pub fn JSContextGroupRelease(group: JSContextGroupRef);
    pub fn JSGlobalContextCreate(globalObjectClass: JSClassRef)
     -> JSGlobalContextRef;
    pub fn JSGlobalContextCreateInGroup(group: JSContextGroupRef,
                                        globalObjectClass: JSClassRef)
     -> JSGlobalContextRef;
    pub fn JSGlobalContextRetain(ctx: JSGlobalContextRef)
     -> JSGlobalContextRef;
    pub fn JSGlobalContextRelease(ctx: JSGlobalContextRef);
    pub fn JSContextGetGlobalObject(ctx: JSContextRef) -> JSObjectRef;
    pub fn JSContextGetGroup(ctx: JSContextRef) -> JSContextGroupRef;
    pub fn JSContextGetGlobalContext(ctx: JSContextRef) -> JSGlobalContextRef;
    pub fn JSGlobalContextCopyName(ctx: JSGlobalContextRef) -> JSStringRef;
    pub fn JSGlobalContextSetName(ctx: JSGlobalContextRef, name: JSStringRef);
    pub fn JSStringCreateWithCharacters(chars: *const JSChar,
                                        numChars: size_t) -> JSStringRef;
    pub fn JSStringCreateWithUTF8CString(string:
                                             *const ::std::os::raw::c_char)
     -> JSStringRef;
    pub fn JSStringRetain(string: JSStringRef) -> JSStringRef;
    pub fn JSStringRelease(string: JSStringRef);
    pub fn JSStringGetLength(string: JSStringRef) -> size_t;
    pub fn JSStringGetCharactersPtr(string: JSStringRef) -> *const JSChar;
    pub fn JSStringGetMaximumUTF8CStringSize(string: JSStringRef) -> size_t;
    pub fn JSStringGetUTF8CString(string: JSStringRef,
                                  buffer: *mut ::std::os::raw::c_char,
                                  bufferSize: size_t) -> size_t;
    pub fn JSStringIsEqual(a: JSStringRef, b: JSStringRef) -> u8;
    pub fn JSStringIsEqualToUTF8CString(a: JSStringRef,
                                        b: *const ::std::os::raw::c_char)
     -> u8;
    pub fn JSObjectMakeTypedArray(ctx: JSContextRef,
                                  arrayType: JSTypedArrayType, length: size_t,
                                  exception: *mut JSValueRef) -> JSObjectRef;
    pub fn JSObjectMakeTypedArrayWithBytesNoCopy(ctx: JSContextRef,
                                                 arrayType: JSTypedArrayType,
                                                 bytes:
                                                     *mut ::std::os::raw::c_void,
                                                 byteLength: size_t,
                                                 bytesDeallocator:
                                                     JSTypedArrayBytesDeallocator,
                                                 deallocatorContext:
                                                     *mut ::std::os::raw::c_void,
                                                 exception: *mut JSValueRef)
     -> JSObjectRef;
    pub fn JSObjectMakeTypedArrayWithArrayBuffer(ctx: JSContextRef,
                                                 arrayType: JSTypedArrayType,
                                                 buffer: JSObjectRef,
                                                 exception: *mut JSValueRef)
     -> JSObjectRef;
    pub fn JSObjectMakeTypedArrayWithArrayBufferAndOffset(ctx: JSContextRef,
                                                          arrayType:
                                                              JSTypedArrayType,
                                                          buffer: JSObjectRef,
                                                          byteOffset: size_t,
                                                          length: size_t,
                                                          exception:
                                                              *mut JSValueRef)
     -> JSObjectRef;
    pub fn JSObjectGetTypedArrayBytesPtr(ctx: JSContextRef,
                                         object: JSObjectRef,
                                         exception: *mut JSValueRef)
     -> *mut ::std::os::raw::c_void;
    pub fn JSObjectGetTypedArrayLength(ctx: JSContextRef, object: JSObjectRef,
                                       exception: *mut JSValueRef) -> size_t;
    pub fn JSObjectGetTypedArrayByteLength(ctx: JSContextRef,
                                           object: JSObjectRef,
                                           exception: *mut JSValueRef)
     -> size_t;
    pub fn JSObjectGetTypedArrayByteOffset(ctx: JSContextRef,
                                           object: JSObjectRef,
                                           exception: *mut JSValueRef)
     -> size_t;
    pub fn JSObjectGetTypedArrayBuffer(ctx: JSContextRef, object: JSObjectRef,
                                       exception: *mut JSValueRef)
     -> JSObjectRef;
    pub fn JSObjectMakeArrayBufferWithBytesNoCopy(ctx: JSContextRef,
                                                  bytes:
                                                      *mut ::std::os::raw::c_void,
                                                  byteLength: size_t,
                                                  bytesDeallocator:
                                                      JSTypedArrayBytesDeallocator,
                                                  deallocatorContext:
                                                      *mut ::std::os::raw::c_void,
                                                  exception: *mut JSValueRef)
     -> JSObjectRef;
    pub fn JSObjectGetArrayBufferBytesPtr(ctx: JSContextRef,
                                          object: JSObjectRef,
                                          exception: *mut JSValueRef)
     -> *mut ::std::os::raw::c_void;
    pub fn JSObjectGetArrayBufferByteLength(ctx: JSContextRef,
                                            object: JSObjectRef,
                                            exception: *mut JSValueRef)
     -> size_t;
}
